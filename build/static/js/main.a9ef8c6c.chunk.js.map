{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["FormData","App","classes","useClasses","React","useState","result","setResult","useForm","handleSubmit","control","onSubmit","useCallback","values","data","id","name","host_id","host_name","neighbourhood_group","neighbourhood","latitude","longitude","room_type","price","minimum_nights","number_of_reviews","last_review","reviews_per_month","calculated_host_listings_count","availability_365","requestData","axios","post","process","headers","Authorization","Accept","then","response","console","log","Results","output1","Values","scoredLabelMean","scoredLabelStandardDeviation","catch","error","alert","message","upperBound","lowerBound","className","app","header","main","FormControl","required","formControl","InputLabel","htmlFor","inputLabel","toUpperCase","as","Input","defaultValue","Button","type","variant","button","section","expensive","cheap","makeStyles","textAlign","backgroundColor","fontSize","color","minHeight","paddingBottom","margin","padding","maxWidth","borderRadius","width","paddingTop","fontWeight","marginTop","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9ef8c6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles, FormControl, Input, InputLabel, Button } from '@material-ui/core';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nenum FormData {\r\n    id = 'id',\r\n    name = 'name',\r\n    host_id = 'host_id',\r\n    host_name = 'host_name',\r\n    neighbourhood_group = 'neighbourhood_group',\r\n    neighbourhood = 'neighbourhood',\r\n    latitude = 'latitude',\r\n    longitude = 'longitude',\r\n    room_type = 'room_type',\r\n    price = 'price',\r\n    minimum_nights = 'minimum_nights',\r\n    number_of_reviews = 'number_of_reviews',\r\n    last_review = 'last_review',\r\n    reviews_per_month = 'reviews_per_month',\r\n    calculated_host_listings_count = 'calculated_host_listings_count',\r\n    availability_365 = 'availability_365',\r\n    column_16 = 'column_16',\r\n    column_17 = 'column_17',\r\n}\r\n\r\ninterface Result {\r\n    price: number;\r\n    scoredLabelMean: number;\r\n    scoredLabelStandardDeviation: number;\r\n}\r\n\r\nconst requestData = (values: Record<FormData, any>) => {\r\n    return ({\r\n        \"Inputs\": {\r\n            \"input1\": {\r\n            \"ColumnNames\": [\r\n                \"id\",\r\n                \"name\",\r\n                \"host_id\",\r\n                \"host_name\",\r\n                \"neighbourhood_group\",\r\n                \"neighbourhood\",\r\n                \"latitude\",\r\n                \"longitude\",\r\n                \"room_type\",\r\n                \"price\",\r\n                \"minimum_nights\",\r\n                \"number_of_reviews\",\r\n                \"last_review\",\r\n                \"reviews_per_month\",\r\n                \"calculated_host_listings_count\",\r\n                \"availability_365\",\r\n                \"Column 16\",\r\n                \"Column 17\"\r\n            ],\r\n            \"Values\": [\r\n                [\r\n                    values.id,\r\n                    values.name,\r\n                    values.host_id,\r\n                    values.host_name,\r\n                    values.neighbourhood_group,\r\n                    values.neighbourhood,\r\n                    values.latitude,\r\n                    values.longitude,\r\n                    values.room_type,\r\n                    values.price,\r\n                    values.minimum_nights,\r\n                    values.number_of_reviews,\r\n                    values.last_review,\r\n                    values.reviews_per_month,\r\n                    values.calculated_host_listings_count,\r\n                    values.availability_365,\r\n                    \"0\",\r\n                    \"0\"\r\n                ],\r\n            ]},\r\n        },\r\n        \"GlobalParameters\": {}\r\n    });\r\n}\r\n\r\nconst App = () => {\r\n    const classes = useClasses();\r\n    const [result, setResult] = React.useState<Result | undefined>();\r\n    const { handleSubmit, control } = useForm<Record<FormData, any>>();\r\n\r\n\tconst onSubmit = React.useCallback((values: Record<FormData, any>) => {\r\n        const data: any = requestData(values);\r\n        axios.post(process.env.REACT_APP_API_URL!, data, {\r\n            headers: {\r\n                Authorization: process.env.REACT_APP_API_KEY!,\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            }\r\n        })\r\n        .then(response => {\r\n            console.log(response);\r\n            setResult({\r\n                price: response.data.Results.output1.Values[5],\r\n                scoredLabelMean: response.data.Results.output1.Values[11],\r\n                scoredLabelStandardDeviation: response.data.Results.output1.Values[12]\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            alert(error?.message);\r\n        })\r\n    }, []);\r\n    \r\n\r\n    let upperBound = 0;\r\n    let lowerBound = 0;\r\n\r\n    if(result) {\r\n        upperBound = result?.scoredLabelMean + result?.scoredLabelStandardDeviation;\r\n        lowerBound = result?.scoredLabelMean - result?.scoredLabelStandardDeviation;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.app}>\r\n            <header className={classes.header}>\r\n                <h1>Airbnb Price Prediction</h1>\r\n            </header>\r\n            <main className={classes.main}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.id} className={classes.inputLabel}>\r\n                            {FormData.id.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.id}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.name} className={classes.inputLabel}>\r\n                            {FormData.name.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.name}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.host_id} className={classes.inputLabel}>\r\n                            {FormData.host_id.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.host_id}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.host_name} className={classes.inputLabel}>\r\n                            {FormData.host_name.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.host_name}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.neighbourhood_group} className={classes.inputLabel}>\r\n                            {FormData.neighbourhood_group.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.neighbourhood_group}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.neighbourhood} className={classes.inputLabel}>\r\n                            {FormData.neighbourhood.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.neighbourhood}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.latitude} className={classes.inputLabel}>\r\n                            {FormData.latitude.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.latitude}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.longitude} className={classes.inputLabel}>\r\n                            {FormData.longitude.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.longitude}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.room_type} className={classes.inputLabel}>\r\n                            {FormData.room_type.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.room_type}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.price} className={classes.inputLabel}>\r\n                            {FormData.price.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.price}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.minimum_nights} className={classes.inputLabel}>\r\n                            {FormData.minimum_nights.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.minimum_nights}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.number_of_reviews} className={classes.inputLabel}>\r\n                            {FormData.number_of_reviews.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.number_of_reviews}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.last_review} className={classes.inputLabel}>\r\n                            {FormData.last_review.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.last_review}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.reviews_per_month} className={classes.inputLabel}>\r\n                            {FormData.reviews_per_month.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.reviews_per_month}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.calculated_host_listings_count} className={classes.inputLabel}>\r\n                            {FormData.calculated_host_listings_count.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.calculated_host_listings_count}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <FormControl required className={classes.formControl}>\r\n                        <InputLabel htmlFor={FormData.availability_365} className={classes.inputLabel}>\r\n                            {FormData.availability_365.toUpperCase()}\r\n                        </InputLabel>\r\n                        <Controller\r\n                            as={\r\n                                <Input />\r\n                            }\r\n                            control={control}\r\n                            defaultValue=\"\"\r\n                            name={FormData.availability_365}\r\n                        />\r\n                    </FormControl>\r\n\r\n                    <Button type='submit' variant='contained' className={classes.button}>\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>\r\n                </form>\r\n            </main>\r\n            { result &&\r\n                <section className={classes.section}>\r\n                    <p>Predicted price is: {result?.scoredLabelMean}</p>\r\n                    <p>Predicted price deviation is: {result?.scoredLabelStandardDeviation}</p>\r\n                    { result?.price > upperBound &&\r\n                        <p className={classes.expensive}>Too expensive!</p>\r\n                    }\r\n                    { result?.price < lowerBound &&\r\n                        <p className={classes.cheap}>Cheap accomodation!</p>\r\n                    }\r\n                    { result?.price > lowerBound && result?.price < upperBound  &&\r\n                        <p>Reasonable price!</p>\r\n                    }\r\n                </section>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst useClasses = makeStyles({\r\n    app: {\r\n        textAlign: 'center',\r\n        backgroundColor: '#282c34',\r\n        fontSize: 'calc(10px + 2vmin)',\r\n        color: 'white',\r\n        minHeight: '100vh',\r\n        paddingBottom: '50px',\r\n    },\r\n    header: {\r\n        margin: '0px',\r\n        padding: '20px',\r\n    },\r\n    main: {\r\n        backgroundColor: 'white',\r\n        maxWidth: '400px',\r\n        margin: '0 auto',\r\n        padding: '20px',\r\n        borderRadius: '10px',\r\n    },\r\n    formControl: {\r\n        width: '100%',\r\n        paddingTop: '8px',\r\n        paddingBottom: '8px',\r\n    },\r\n    inputLabel: {\r\n        fontWeight: 'bold',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n        fontWeight: 'bold',\r\n    },\r\n    section: {\r\n        maxWidth: '600px',\r\n    },\r\n    cheap: {\r\n        color: 'green',\r\n    },\r\n    expensive: {\r\n        color: 'red',\r\n    },\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}