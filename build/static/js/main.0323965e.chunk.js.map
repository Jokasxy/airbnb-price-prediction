{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["FormData","App","classes","useClasses","useForm","handleSubmit","control","onSubmit","React","useCallback","values","data","id","name","host_id","host_name","neighbourhood_group","neighbourhood","latitude","longitude","room_type","price","minimum_nights","number_of_reviews","last_review","reviews_per_month","calculated_host_listings_count","availability_365","requestData","axios","post","process","headers","Authorization","Accept","then","response","console","log","catch","error","className","app","header","main","FormControl","required","formControl","InputLabel","htmlFor","inputLabel","toUpperCase","as","Input","defaultValue","Button","type","variant","button","makeStyles","textAlign","backgroundColor","fontSize","color","minHeight","paddingBottom","margin","padding","maxWidth","borderRadius","width","paddingTop","fontWeight","marginTop","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0323965e.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, FormControl, Input, InputLabel, Button } from '@material-ui/core';\nimport { Controller, useForm } from 'react-hook-form';\nimport './App.css';\nimport axios from 'axios';\n\nenum FormData {\n    id = 'id',\n    name = 'name',\n    host_id = 'host_id',\n    host_name = 'host_name',\n    neighbourhood_group = 'neighbourhood_group',\n    neighbourhood = 'neighbourhood',\n    latitude = 'latitude',\n    longitude = 'longitude',\n    room_type = 'room_type',\n    price = 'price',\n    minimum_nights = 'minimum_nights',\n    number_of_reviews = 'number_of_reviews',\n    last_review = 'last_review',\n    reviews_per_month = 'reviews_per_month',\n    calculated_host_listings_count = 'calculated_host_listings_count',\n    availability_365 = 'availability_365',\n    column_16 = 'column_16',\n    column_17 = 'column_17',\n}\n\nconst requestData = (values: Record<FormData, any>) => {\n    return ({\n        \"Inputs\": {\n            \"input1\": {\n            \"ColumnNames\": [\n                \"id\",\n                \"name\",\n                \"host_id\",\n                \"host_name\",\n                \"neighbourhood_group\",\n                \"neighbourhood\",\n                \"latitude\",\n                \"longitude\",\n                \"room_type\",\n                \"price\",\n                \"minimum_nights\",\n                \"number_of_reviews\",\n                \"last_review\",\n                \"reviews_per_month\",\n                \"calculated_host_listings_count\",\n                \"availability_365\",\n                \"Column 16\",\n                \"Column 17\"\n            ],\n            \"Values\": [\n                [\n                    values.id,\n                    values.name,\n                    values.host_id,\n                    values.host_name,\n                    values.neighbourhood_group,\n                    values.neighbourhood,\n                    values.latitude,\n                    values.longitude,\n                    values.room_type,\n                    values.price,\n                    values.minimum_nights,\n                    values.number_of_reviews,\n                    values.last_review,\n                    values.reviews_per_month,\n                    values.calculated_host_listings_count,\n                    values.availability_365,\n                    \"0\",\n                    \"0\"\n                ],\n            ]},\n        },\n        \"GlobalParameters\": {}\n    });\n}\n\nconst App = () => {\n    const classes = useClasses();\n    const { handleSubmit, control } = useForm<Record<FormData, any>>();\n\n\tconst onSubmit = React.useCallback((values: Record<FormData, any>) => {\n        const data: any = requestData(values);\n        axios.post(process.env.REACT_APP_API_URL!, data, {\n            headers: {\n                Authorization: process.env.REACT_APP_API_KEY!,\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n            }\n        })\n        .then(response => {\n            console.log(response);\n        })\n        .catch(error => {\n            console.log(error);\n        })\n\t}, []);\n\n    return (\n        <div className={classes.app}>\n            <header className={classes.header}>\n                <h1>Airbnb Price Prediction</h1>\n            </header>\n            <main className={classes.main}>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.id} className={classes.inputLabel}>\n                            {FormData.id.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.id}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.name} className={classes.inputLabel}>\n                            {FormData.name.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.name}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.host_id} className={classes.inputLabel}>\n                            {FormData.host_id.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.host_id}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.host_name} className={classes.inputLabel}>\n                            {FormData.host_name.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.host_name}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.neighbourhood_group} className={classes.inputLabel}>\n                            {FormData.neighbourhood_group.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.neighbourhood_group}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.neighbourhood} className={classes.inputLabel}>\n                            {FormData.neighbourhood.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.neighbourhood}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.latitude} className={classes.inputLabel}>\n                            {FormData.latitude.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.latitude}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.longitude} className={classes.inputLabel}>\n                            {FormData.longitude.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.longitude}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.room_type} className={classes.inputLabel}>\n                            {FormData.room_type.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.room_type}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.price} className={classes.inputLabel}>\n                            {FormData.price.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.price}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.minimum_nights} className={classes.inputLabel}>\n                            {FormData.minimum_nights.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.minimum_nights}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.number_of_reviews} className={classes.inputLabel}>\n                            {FormData.number_of_reviews.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.number_of_reviews}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.last_review} className={classes.inputLabel}>\n                            {FormData.last_review.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.last_review}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.reviews_per_month} className={classes.inputLabel}>\n                            {FormData.reviews_per_month.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.reviews_per_month}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.calculated_host_listings_count} className={classes.inputLabel}>\n                            {FormData.calculated_host_listings_count.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.calculated_host_listings_count}\n                        />\n                    </FormControl>\n\n                    <FormControl required className={classes.formControl}>\n                        <InputLabel htmlFor={FormData.availability_365} className={classes.inputLabel}>\n                            {FormData.availability_365.toUpperCase()}\n                        </InputLabel>\n                        <Controller\n                            as={\n                                <Input />\n                            }\n                            control={control}\n                            defaultValue=\"\"\n                            name={FormData.availability_365}\n                        />\n                    </FormControl>\n\n                    <Button type='submit' variant='contained' className={classes.button}>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n                </form>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n\nconst useClasses = makeStyles({\n    app: {\n        textAlign: 'center',\n        backgroundColor: '#282c34',\n        fontSize: 'calc(10px + 2vmin)',\n        color: 'white',\n        minHeight: '100vh',\n        paddingBottom: '50px',\n    },\n    header: {\n        margin: '0px',\n        padding: '20px',\n    },\n    main: {\n        backgroundColor: 'white',\n        maxWidth: '400px',\n        margin: '0 auto',\n        padding: '20px',\n        borderRadius: '10px',\n    },\n    formControl: {\n        width: '100%',\n        paddingTop: '8px',\n        paddingBottom: '8px',\n    },\n    inputLabel: {\n        fontWeight: 'bold',\n    },\n    button: {\n        width: '100%',\n        marginTop: '20px',\n        marginBottom: '20px',\n        fontWeight: 'bold',\n    },\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}